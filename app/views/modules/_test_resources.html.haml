.panel-heading
  %h3 More Resources
.panel-body
  %p.resource The creator of Rspec created a decent <a href='http://blog.davidchelimsky.net/blog/2007/05/14/an-introduction-to-rspec-part-i/'>beginning tutorial</a>, but if you need more coverage (ha!), grab a copy of the Rspec book from the library.
  %p.resource Here's an interesting <a href='https://web.archive.org/web/20140707103657/http://rubylearning.com/blog/2010/09/30/the-testing-mindset/'>blog post</a> on the mindset of doing TDD.
  %p.resource A good place to start understanding BDD is <a href='https://blog.engineyard.com/2009/cucumber-introduction'>this article</a> on BDD via Cucumber by Engine Yard.
  %p.resource Once you've read that, RailsCasts did two good episodes [<a href='http://railscasts.com/episodes/155-beginning-with-cucumber'>1</a>, <a href='http://railscasts.com/episodes/159-more-on-cucumber'>2</a>] on Cucumber.
  %p.resource Writing good test code is just as hard and important as writing good app code. Here are <a href='http://www.thoughtworks.com/insights/blog/write-better-tests-5-steps'>a few good rules</a> for improving your test code.
  %p.resource Still not sure what to test? <a href='https://www.youtube.com/watch?v=URSWYvyc42M'>This talk</a> by Sandi Metz has some seriously simple rules for what tests to write.
  %p.resource You really really, really want to learn the matchers provided by default in <a href='https://github.com/rspec/rspec-expectations#built-in-matchers'>Rspec</a> here.
  %p.resource Also, here's a <a href='https://gist.github.com/zhengjia/428105'>decent cheat-sheet</a> for Capybara matchers, which are reasonably cool as well.
  %p.resource Some <a href='http://betterspecs.org/'>additional documentation</a> of best practices when using Rspec and Ruby
  %p.resource It's dangerous to go alone! Take <a href='https://github.com/jmmastey/level_up_exercises'>this</a>.

= render partial: 'modules/exercises'
